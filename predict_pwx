#!/usr/bin/perl

# Copyright 1997-2024 Paul Walters
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#-----------------------------------------------------------------------------
#
# Program:      predict_pwx
#
# Purpose:      This program retrieves the latest weather observations in 
#		the database and creates the necessary control files for 
#		the Neural program to predict the weather.  The Neural
#		program is called from within this program, then the results
#		are stored into the database.
#
# Syntax:       predict_pwx <forecast_hours>
#
# Options:      <forecast_hours> - specifies the number of hours in the future
#                                  the network is going to be trained for.
#               [time] - specifies the time of day for which to make the
#                        prediction from.  Defaults to the last set of data
#                        available in the database.
#
# NOTE:  There is hard-coded path information in this program.
#
#-----------------------------------------------------------------------------

use strict;
use Config::Simple;

my $cfg = new Config::Simple(syntax=>'SIMPLE') || die Config::Simple->error();
$cfg->read("$ENV{HOME}/.weather-station.cfg") || $cfg->read("/home/weather/.weather-station.cfg") || die Config::Simple->error();

my $NEURAL_ROOT = $cfg->param('neuralRoot');
my $predictStation = $cfg->param('predictStation');
my $runtimeDir = $cfg->param('runtimeDir') || '/run/weather';

die usage() if ($NEURAL_ROOT eq '' || $predictStation eq '');

require "${NEURAL_ROOT}/tools/common.pm";

my $force = 0;
my $last_obs = "";
my $update = 1;
my $verbose = 0;
my $forecast_period = "";

for ( my $i=0; $i < @ARGV; $i++ ) {
	if ( $ARGV[$i] eq "--force" ) {
		$force = 1;
	}
	elsif ( $ARGV[$i] eq "--last" && $i+1 < @ARGV ) {
		$last_obs = $ARGV[++$i];
	}
	elsif ( $ARGV[$i] eq "--noupdate" ) {
		$update = 0;
	}
	elsif ( $ARGV[$i] eq "--verbose" ) {
		$verbose = 1;
	}
	elsif ( $forecast_period eq "" && $ARGV[$i] =~ /^\d+$/ ) {
		$forecast_period = $ARGV[$i];
	}
	else {
		usage();
	}
}

usage() if ( $forecast_period eq "" );

sub usage
{
	die "$0 <forecast_hours>\n";
}

END 
{
	unlink "PWX${forecast_period}.$$.TMP" if ( -e "PWX${forecast_period}.$$.TMP" );
	unlink "CLOUDS${forecast_period}.$$.TMP" if ( -e "CLOUDS${forecast_period}.$$.TMP" );
	unlink "RAIN${forecast_period}.$$.TMP" if ( -e "RAIN${forecast_period}.$$.TMP" );
	unlink "SNOW${forecast_period}.$$.TMP" if ( -e "SNOW${forecast_period}.$$.TMP" );
	unlink "ICE${forecast_period}.$$.TMP" if ( -e "ICE${forecast_period}.$$.TMP" );
	unlink "THUNDER${forecast_period}.$$.TMP" if ( -e "THUNDER${forecast_period}.$$.TMP" );
}

#chdir ("${NEURAL_ROOT}/neural.data");
chdir($runtimeDir);
system("/bin/cp ${NEURAL_ROOT}/neural.data/CLOUDS${forecast_period}.CON $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/CLOUDS${forecast_period}.WGHT $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/RAIN${forecast_period}.CON $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/RAIN${forecast_period}.WGHT $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/SNOW${forecast_period}.CON $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/SNOW${forecast_period}.WGHT $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/ICE${forecast_period}.CON $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/ICE${forecast_period}.WGHT $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/THUNDER${forecast_period}.CON $runtimeDir");
system("/bin/cp ${NEURAL_ROOT}/neural.data/THUNDER${forecast_period}.WGHT $runtimeDir");

$| = 1;

use Time::Local;

my $dbh = openDatabase();

$last_obs = getLastObservationTime($dbh) if ( $last_obs eq "" );

die "Can't determine last observation time\n" if ( $last_obs eq "" );

my $forecast_time = computePredictionTime($forecast_period, $last_obs);

print "Forecast time: $forecast_time\n" if ( $verbose );

my $already_done = checkForPrediction($dbh, $forecast_time, 'weather');

if ( $already_done && !$force ) {
	print "\nPresent weather already predicted for this time.\n";
	$dbh->disconnect;
	exit 0;
}

#-----------------------------------------------------------------------------

my @sids = getSites($dbh);

#-----------------------------------------------------------------------------

print "Getting observations..." if ( $verbose );

my $query = "
        select unix_timestamp(time) as timestamp, site, Lower(weather) as weather
        from   observations
	where  abs(unix_timestamp(time)-unix_timestamp('$last_obs')) < 1800 
	order by site, timestamp
";

##print "$query\n";
my $sth=$dbh->prepare ( $query );
die "$DBI::errstr\n" if ( $DBI::err > 0 );
$sth->execute;
die "$DBI::errstr\n" if ( $DBI::err > 0 );

my %data = ();
while ( my $row = $sth->fetchrow_hashref() ) {
        $data{$$row{site}} = $$row{weather};
}

die "No observation for $last_obs.\n" if ( !exists $data{"$predictStation"} );

#-----------------------------------------------------------------------------

print "Generating execute file..." if ( $verbose );

@sids = sort @sids;
my @t = ( $predictStation ); push(@t, @sids); @sids = @t;

for ( my $i=0; $i<@sids; $i++ ) {
	my $sid = $sids[$i];
	my $pwx = $data{$sid};
	$pwx = $data{"$predictStation"} if ( $pwx eq "" );
	outputPWX($pwx,$forecast_period,".$$.TMP",($i+1==scalar(@sids)));
}

$sth->finish;

#-----------------------------------------------------------------------------

#executeNeural('PWX', $verbose);
#my $clouds = executeNeural('CLOUDS', $forecast_period, $verbose);
#my $rain = executeNeural('RAIN', $forecast_period, $verbose);
#my $snow = executeNeural('SNOW', $forecast_period, $verbose);
#my $ice = ""; # executeNeural('ICE', $forecast_period, $verbose);
#my $thunder = executeNeural('THUNDER', $forecast_period, $verbose);

my $weather = executeNeural($forecast_period, $verbose);

#my $weather = $rain . " " . $snow . " " . $ice . " " . $thunder;
#$weather =~ s/^\s+//;
#$weather =~ s/\s+$//;
#$weather =~ s/\s\s+/ /g;
#$weather = $clouds if ( $weather eq "" );
#$weather = "Clear" if ( $weather eq "" );

sub executeNeural
{
	#my ( $type, $forecast_period, $verbose ) = @_;
	my ( $forecast_period, $verbose ) = @_;

	my $type = "PWX";

	print "Executing Neural..." if ( $verbose );

	unlink ( "${type}${forecast_period}.$$.OUT" );
	open ( PIPE, "|${NEURAL_ROOT}/neural" ) || die "Cannot start neural (!$)\n";
	#print PIPE "CONTROL:${type}${forecast_period}.CON\n";           	sleep 3;
	#print PIPE "OUTPUT FILE:${type}${forecast_period}.$$.OUT\n";		sleep 3;
	#print PIPE "RESTORE WEIGHTS: ${type}${forecast_period}.WGHT\n";	sleep 3;
	#print PIPE "LAYER INIT: NOINIT\n";        				sleep 3;
	#print PIPE "EXECUTE : ${type}${forecast_period}.$$.TMP\n";        	sleep 3;
	print PIPE "OUTPUT FILE:${type}${forecast_period}.$$.OUT\n";		sleep 3;

	print PIPE "CONTROL:CLOUDS${forecast_period}.CON\n";           		sleep 1;
	print PIPE "RESTORE WEIGHTS: CLOUDS${forecast_period}.WGHT\n";		sleep 1;
	print PIPE "LAYER INIT: NOINIT\n";        				sleep 1;
	print PIPE "EXECUTE : CLOUDS${forecast_period}.$$.TMP\n";        	sleep 1;

	print PIPE "CLEAR WEIGHTS:\n";						sleep 1;
	print PIPE "CONTROL:RAIN${forecast_period}.CON\n";           		sleep 1;
	print PIPE "RESTORE WEIGHTS: RAIN${forecast_period}.WGHT\n";		sleep 1;
	print PIPE "LAYER INIT: NOINIT\n";        				sleep 1;
	print PIPE "EXECUTE : RAIN${forecast_period}.$$.TMP\n";        		sleep 1;

	print PIPE "CLEAR WEIGHTS:\n";						sleep 1;
	print PIPE "CONTROL:RAIN${forecast_period}.CON\n";           		sleep 1;
	print PIPE "CONTROL:SNOW${forecast_period}.CON\n";           		sleep 1;
	print PIPE "RESTORE WEIGHTS: SNOW${forecast_period}.WGHT\n";		sleep 1;
	print PIPE "LAYER INIT: NOINIT\n";        				sleep 1;
	print PIPE "EXECUTE : SNOW${forecast_period}.$$.TMP\n";        		sleep 1;

	print PIPE "CLEAR WEIGHTS:\n";						sleep 1;
	print PIPE "CONTROL:ICE${forecast_period}.CON\n";           		sleep 1;
	print PIPE "RESTORE WEIGHTS: ICE${forecast_period}.WGHT\n";		sleep 1;
	print PIPE "LAYER INIT: NOINIT\n";        				sleep 1;
	print PIPE "EXECUTE : ICE${forecast_period}.$$.TMP\n";        		sleep 1;

	print PIPE "CLEAR WEIGHTS:\n";						sleep 1;
	print PIPE "CONTROL:THUNDER${forecast_period}.CON\n";           	sleep 1;
	print PIPE "RESTORE WEIGHTS: THUNDER${forecast_period}.WGHT\n";		sleep 1;
	print PIPE "LAYER INIT: NOINIT\n";        				sleep 1;
	print PIPE "EXECUTE : THUNDER${forecast_period}.$$.TMP\n";        	sleep 1;

	print PIPE "QUIT:\n";                     				sleep 1;
	close (PIPE);
	print "\n";
	print "Done.\n" if ( $verbose );

	print "Reading Results..." if ( $verbose );

	open ( IN, "${type}${forecast_period}.$$.OUT" ) || die "Cannot open ${type}${forecast_period}.$$.OUT (!$).\n";
	my $cloudsIn = <IN>;	chomp($cloudsIn);	$cloudsIn =~ s/^\s+//;	print "read clouds = $cloudsIn\n" if ( $verbose );
	my $rainIn = <IN>;	chomp($rainIn);		$rainIn =~ s/^\s+//;	print "read rain = $rainIn\n" if ( $verbose );
	my $snowIn = <IN>;	chomp($snowIn);		$snowIn =~ s/^\s+//;	print "read snow = $snowIn\n" if ( $verbose );
	my $iceIn = <IN>;	chomp($iceIn);		$iceIn =~ s/^\s+//;	print "read ice = $iceIn\n" if ( $verbose );
	my $thunderIn = <IN>;	chomp($thunderIn);	$thunderIn =~ s/^\s+//;	print "read thunder = $thunderIn\n" if ( $verbose );
	close ( IN );

	unlink ("${type}${forecast_period}.$$.OUT");
	unlink ("${type}${forecast_period}.$$.TMP");

	print "Done.\n" if ( $verbose );

	my $clouds = decodePWX("CLOUDS", $cloudsIn);	$clouds =~ s/^\s+//g;	$clouds =~ s/\s+$//g;
	my $rain = decodePWX("RAIN", $rainIn);		$rain =~ s/^\s+//g;	$rain =~ s/\s+$//g;
	my $snow = decodePWX("SNOW", $snowIn);		$snow =~ s/^\s+//g;	$snow =~ s/\s+$//g;
	my $ice = decodePWX("ICE", $iceIn);		$ice =~ s/^\s+//g;	$ice =~ s/\s+$//g;
	my $thunder = decodePWX("THUNDER", $thunderIn);	$thunder =~ s/^\s+//g;	$thunder =~ s/\s+$//g;

	my $weather = $rain . " " . $snow . " " . $ice . " " . $thunder;
	$weather =~ s/^\s+//;
	$weather =~ s/\s+$//;
	$weather =~ s/\s\s+/ /g;
	$weather = $clouds if ( $weather eq "" );
	$weather = "Clear" if ( $weather eq "" );

	if ( $verbose ) {
		printf "Predicted weather for %s: (%s,%s,%s,%s,%s) %-30.30s ", $forecast_time, $cloudsIn, $rainIn, $snowIn, $iceIn, $thunderIn, $weather;

		my $query = "select weather from predicted where time = '$forecast_time'";
		my $sth = $dbh->prepare ( $query );
		$sth->execute;
		my $ref = $sth->fetchrow_hashref();
		$sth->finish;

		printf "\tPrevious: %-20.20s ", $ref->{weather};

		$query = "select weather from observations where site = '$predictStation' and abs(unix_timestamp(time)-unix_timestamp('$forecast_time')) < 1800 ";
		$sth = $dbh->prepare ( $query );
		$sth->execute;
		$ref = $sth->fetchrow_hashref();
		$sth->finish;

		printf "\tActual: %-20.20s\n", $ref->{weather};
	}

	return $weather;
}

#-----------------------------------------------------------------------------

if ( $update ) {
        print "Updating database..." if ( $verbose );

        if ( $weather ne "" ) {
        	my $update = "INSERT ignore INTO predicted (time, weather) VALUES ('$forecast_time', '$weather')";
        	$dbh->do ( $update );

        	$update = "UPDATE predicted SET weather = '$weather' WHERE time = '$forecast_time'";
        	$dbh->do ( $update );

        	print STDERR "$DBI::errstr\n" if ( $DBI::err > 1 );
        }

        print "Done.\n" if ( $verbose );
}

#-----------------------------------------------------------------------------

$dbh->disconnect;
exit 0;
