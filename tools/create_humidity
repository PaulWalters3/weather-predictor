#!/usr/bin/perl

# Copyright 1997-2024 Paul Walters
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use Config::Simple;

my $cfg = new Config::Simple(syntax=>'SIMPLE') || die Config::Simple->error();
$cfg->read("$ENV{HOME}/.weather-station.cfg") || $cfg->read("/home/weather/.weather-station.cfg") || die Config::Simple->error();

my $NEURAL_ROOT = $cfg->param('neuralRoot');
my $predictStation = $cfg->param('predictStation');
my $predictIgnoreSites = $cfg->param('predictIgnoreSites');
my $runtimeDir = $cfg->param('runtimeDir') || '/run/weather';

require "${NEURAL_ROOT}/tools/common.pm";

die "$0 <forecast_hours>\n" if ( @ARGV != 1 );

my $dbHost = $cfg->param('dbHost');
my $dbPassword = $cfg->param('dbPassword');
my $dbUser = $cfg->param('dbUser');

my $forecast_period = $ARGV[0];

my $dbh = openDatabase($dbHost, $dbUser, $dbPassword);

my @sids = getSites($dbh, $predictStation, $predictIgnoreSites);

my $query = "
        select unix_timestamp(time) as timestamp, date_format(time,'%H') as hour, site, temperature, humidity
        from   observations
";

my $sth=$dbh->prepare ( $query );
die "$DBI::errstr\n" if ( $DBI::err > 0 );
$sth->execute;
die "$DBI::errstr\n" if ( $DBI::err > 0 );

my %humidity = ();
my %temperature = ();
my %hours = ();
while ( my $row = $sth->fetchrow_hashref() ) {
        $humidity{$$row{timestamp}}->{$$row{site}} = $$row{humidity};
        $temperature{$$row{timestamp}}->{$$row{site}} = $$row{temperature};
        $hours{$$row{timestamp}} = $$row{hour};
}

my $count=0;

@sids = sort @sids;
my @t = ( $predictStation ); push(@t, @sids); @sids = @t;

foreach my $time ( sort keys %hours ) {
        my %h = %{$humidity{$time}};
        my %t = %{$temperature{$time}};
	my $hour = $hours{$time};

        next if (!exists $h{$predictStation} || !exists $t{$predictStation});

        outputHumidity($t{$predictStation},$h{$predictStation},$forecast_period,".DAT",$hour);

        foreach my $site ( @sids ) {
		next if ( $site eq $predictStation );
		$h{$site} = $h{$predictStation} if ($h{$site} eq "");
		$t{$site} = $t{$predictStation} if ($t{$site} eq "");
        	outputHumidity($t{$site},$h{$site},$forecast_period,".DAT");
        }

        my ( $t_future, $h_future );
        my $future = $time + ($forecast_period * 3600);
        if ( exists $t{$future}->{$predictStation} ) {
        	$t_future = $temperature{$future}->{$predictStation};
        } else {
        	$t_future = $t{$predictStation};
        }
        if ( exists $h{$future}->{$predictStation} ) {
        	$h_future = $humidity{$future}->{$predictStation};
        } else {
        	$h_future = $h{$predictStation};
        }
        outputHumidity("",$h_future,$forecast_period,".DAT");

        $count++;
}

print "$count\n";

$sth->finish;
$dbh->disconnect;

#
# Time to create the Neural control file.
# The number of hidden layers to be used is a function of the number of
# input layers and number of output layers.  sqrt(input*output) + 1.
#
my $hidden = (2 * scalar(@sids))+1;		## One extra neuron for "hour"

open ( FP, ">HUMIDITY${forecast_period}.CON" ) || die "Cannot open HUMIDITY${forecast_period}.CON (!$).\n";
print FP "NETWORK MODEL: LAYER\n";
print FP "LAYER INIT: ANNEAL\n";
print FP "OUTPUT MODEL: GENERAL\n";
print FP "OUTPUT FILE: HUMIDITY${forecast_period}.OUT\n";
printf FP "N INPUTS: %d\n", $hidden;
print FP "N OUTPUTS: 1\n";
printf FP "N HIDDEN1: %d\n", int(sqrt($hidden * 1))+1;
print FP "N HIDDEN2: 0\n";
print FP "TRAIN: HUMIDITY${forecast_period}.DAT\n";

close ( FP );

exit 0;

